# -*- coding: utf-8 -*-
"""INSAID_Fraud_f_V1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18pt1v37w5lqL1meaJprPTjEJhtn4Yfsc
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive'

import pandas as pd
df = pd.read_csv('Fraud.csv')

df.describe()

df.isnull().sum()

df.head(10)

unique_amounts_with_count_1 = df[df['isFraud'] == 1]['amount'].value_counts()
amounts_to_drop = unique_amounts_with_count_1[unique_amounts_with_count_1 == 1].index


df = df[~((df['isFraud'] == 1) & (df['amount'].isin(amounts_to_drop)))]

transfer_transactions = df[df['type'] == 'TRANSFER']
cash_out_transactions = df[df['type'] == 'CASH_OUT']

transfer_dict = transfer_transactions.groupby(['step', 'amount']).apply(lambda x: x.index.tolist()).to_dict()
cash_out_dict = cash_out_transactions.groupby(['step', 'amount']).apply(lambda x: x.index.tolist()).to_dict()


df['pair'] = 0

for _, transfer_row in transfer_transactions.iterrows():
    transfer_step = transfer_row['step']
    transfer_amount = transfer_row['amount']


    if (transfer_step, transfer_amount) in cash_out_dict:
        cash_out_indices = cash_out_dict[(transfer_step, transfer_amount)]
        df.loc[transfer_row.name, 'pair'] = 1
        df.loc[cash_out_indices, 'pair'] = 1

df.loc[(df['type'] == 'CASH_OUT') & (df['pair'] == 0), 'pair'] = 1
df['pair'] = df['pair'].fillna(0).astype(int)

df['istype_co_tf'] = (df['type'].isin(['CASH_OUT', 'TRANSFER'])).astype(int)

df['amount_gt_10000000'] = (df['amount'] > 10000000).astype(int)

df[df['pair']==1]

var=["newbalanceOrig","pair","istype_co_tf","amount_gt_10000000"]

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report

X = df[['newbalanceOrig', 'pair', 'istype_co_tf', 'amount_gt_10000000']]
y = df['isFraud']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,shuffle=False, random_state=42)

model = XGBClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
classification_report_output = classification_report(y_test, y_pred)

accuracy

result_df = pd.DataFrame({'y_test': y_test, 'y_pred': y_pred})
result_df = pd.concat([result_df, X_test], axis=1)

result_df

result_df[result_df['y_test'] != result_df['y_pred']]







df['type'].value_counts()

df[df['isFlaggedFraud']==1]["type"].value_counts()

df[df['isFraud']==1]["type"].value_counts()

df[df['isFraud']==1]["newbalanceOrig"].value_counts()

df[df['isFraud']==1]["newbalanceOrig"].nunique()

df[df['amount']==10000000.00 ]

df[df['isFraud']==1]["amount"].value_counts().tail(44)

df[df['isFraud']==1]["amount"].value_counts().head(10)

df[df['isFraud']==1].count()

amount_value_counts = df[df['isFraud'] == 1]['amount'].value_counts()
new_df = amount_value_counts.reset_index()
new_df.columns = ['amount', 'count']

df[df['newbalanceOrig']==0]

new_df['count'].value_counts()

df[(df['isFraud'] == 1) & (df['amount'] == 0)]

df['amount'].value_counts()

df[(df['type'] == 'CASH_OUT') | (df['type'] == 'TRANSFER')]

df[df['isFraud']==1]

df[df['nameOrig']=="C553264065"]

